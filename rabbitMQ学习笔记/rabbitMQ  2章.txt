四层表示法：
<1>
  1)
	1
	2
	...
		a
		b
		c
			A
			B
			C

rabbitMQ 第2章内容再回顾

<1> RabbitMQ 核心概念 和 AMQP协议
  1) 本章导航
	1 互联网大厂为什么选择RabbitMQ？
	2 rabbitmq的高性能如何做到的？
	3 什么是AMQP高级协议？
	4 AMQP核心概念是什么？ 比如：connection channel 生产者 消费者 routingkey，virtualhost exchange等 怎么构建
	5 rabbitmq整体架构模型
	6 rabbitmq消息是如何流转的？
	7 rabbitmq安装与使用
	8 rabbitmq管控台和命令行
	9 rabbitmq消息生产与消费
	10 rabbitmq队列、绑定、虚拟主机、消息 //细粒度讲解

  2) 初识rabbitmq
	rabbitmq特点：跨平台，erlang，基于AMQP协议
	
	1 大厂使用rabbitmq：滴滴，美团，头条，去哪儿，艺龙
	2 开源、性能优秀，稳定性保障
	3 可靠性消息投递模式(confirm)、返回模式(return)
	  ---------------------------------------------
	4 与springAMQP完美的整合，API丰富
	5 集群模式丰富，表达式配置，HA模式(高可用模式)，镜像队列模型
	6 保证数据不丢失的前提下做到高可靠性、可用性
	  ------------------------------------------
  3) rabbitMQ高性能原因(延迟，性能，吞吐量等)：
	erlang语言：最初用于交换机的架构模式
		    erlang有着和原生socket一样的延迟！
		    ----------------------------------
	
  4) 什么是AMQP高级消息队列协议？
	特点：二进制协议；
	      上层消息中间件协议规范

	协议模型：
					server 
				      virtual host
					
	publisher			
	application--------------->	exchange
					   |
					   |
	consumer			message
	application<----------------    queue


  5) AMQP核心概念
	1、server：又称Broker，接受客户端的连接，实现AMQP实体服务
	2、connection：连接，应用程序与Broker的网络连接
	3、channel：网络信道，几乎所有的操作都在channel中进行，channel
	是进行消息读写的通道。客户端可以建立多个channel，每个channel
	代表一个会话任务。
	4、message：消息，服务器和应用程序之间传送的数据。由properties
	和body组成。properties可以对消息进行修饰，比如消息的优先级、
	延迟等高级特性；body这就是消息体内容。
	5、virtual host：虚拟主机，用于进行逻辑隔离，最上层的消息路由。
	一个virtual host里面可以有若干个exchange和queue，同一个virtual
	host里面不能有相同名称的exchange或queue
	如：redis的逻辑数据库db0-16等
	6、exchange：交换机，接收消息，根据路由键转发消息到绑定的队列
	7、binding：exchange和queue之间的虚拟连接，binding中可以包含routingkey
	8、queue：也称为message queue，消息队列，保存消息并将它们转发给消费者

  6) rabbitMq整体架构：
	图1
	client ---------server-------------clients
	produce       exchanges queues	    consume 
	messages			    message

	图2
	publish ------>message-----exchange-------message 
					|         queue
				   message
				   queue   ------>consume

  7) rabbitmq安装(2.7-8)
	可参考rabbitmq的安装说明
	
	启动等命令行操作，与访问地址等等

  8) 命令行和管控台-基础操作
	1、rabbitmqctl stop_app：关闭应用
	2、rabbitmqctl start_app：启动应用
	3、rabbitmqctl status：节点状态
	4、rabbitmqctl add_user username password：添加用户
	5、rabbitmqctl list_users：列出所有用户
	6、rabbitmqctl delete_user username：删除用户
	7、rabbitmqctl clear_permissions -p vhostpath username：清除用户权限
	8、rabbitmqctl set_permissions -p vhostpath username ".*" ".*" ".*"  设置用户权限
	9、rabbitmqctl add_vhost vhostpath	创建虚拟主机
	10、rabbitmqctl list_vhosts：		列出所有虚拟主机
	11、rabbitmqctl list_permission -p vhostpath	列出虚拟主机上所有权限	
	12、rabbitmqctl delete_vhost vhostpath	删除虚拟主机
	13、rabbitmqctl list_queues	查看所有队列信息
	14、rabbitmqctl -p vhostpath purge_queue blue:	清除队列里的消息

     命令行和管控台-基础操作(影响范围比较大)
	1、rabbitmqctl reset：	移除所有数据，要在rabbitmqctl stop_app之后使用
	2、rabbitmqctl join_cluster <clusternode> [--ram] : 组成集群命令
						   ram 加入的存储模式：如--d 存储在磁盘上
	3、rabbitmqctl cluster_status：查看集群状态
	4、rabbitmqctl change_cluster_node_type disc | ram
	#修改集群节点的存储方式
	5、rabbitmqctl forget_cluster_node [--offline] 忘记节点(摘除节点)
		--offline ：如果主节点启动不起来，从节点可以用，这个时候在服务不启动的情况下，对接点进行摘除

  9) rabbitmq管控台介绍
	1 介绍了基本rabbitmq的组成，端口，文件，node，improt/export
	2 添加用户，添加并绑定给用户 虚拟主机等等
	3 download 一个json配置文件
	
  10) 急速入门-消息生产与消费
	connectionFactory：获取连接工厂
	connection：一个连接
	channel：数据通信信道，可发送和接收消息
	queue：具体的消息存储队列
	producer & consumer 生产者和消费者

	实战演练看test001 代码
	...略
  
	本节主要介绍了生产者和消费者如何传递消息
	启动生产者或者消费者 观察管控台queues的状态
	exchange设置为空，则消息如何接收到

  11) exchange 交换机
	exchange：接收消息，并根据路由键转发消息所绑定的队列

	图：
	client-------exchange1 2...---------->queue 1 2 3------client1 2 3

			rabbitmq server
			routingkey

	2、交换机属性
		a、Name：交换机名称
		b、Type：交换机类型 direct、topic、fanout、headers
		c、durability：是否需要持久化，true为持久化
		d、autoDelete：当最后一个绑定exchange上的队列删除后，自动删除该exchange
				//也就是当exchange没有队列绑定了，呢么就会自动删除
				//上一节autoDelete设置：如果queue没有exchange时，也有自动删除设置

		e、internal：当前exchange是否用于rabbitmq内部使用，默认为false
				//该属性如果开发rabbitmq扩展插件，需要为true，使用一般都为false
		f、arguments：扩展参数，用于扩展AMQP协议自制定化使用

	   direct exchange
		a、所有发送到direct exchange的消息被转发到routekey中指定的queue

		   注意：Direct模式可以使用rabbitMQ自带的exchange：default exchange，
		   所以不需要将exchange进行任何绑定(binding)操作，消息传递时，routekey
		   必须完全匹配才会被队列接收，否则该消息会被抛弃。

		b、代码编写...

		c、编写完成后：启动消费端
			A、观察管控台exchange
				//多了一个test_direct_exchange
					点进去查看
						//to以下内容(绑定到以下内容)
						//可以看到绑定的队列queue和routingKey 、Argument (可以解除绑定)
			B、再看queues
				//也多了一个test_direct_queue
					然后点进去 
						// from以下内容(从以下获取)
						//可以看到绑定的exchange和路由key 绑定关系(可以解绑unbind)
							可以再点进去回到exchange查看内容
								和上边一样

			C、总结：routingKey在direct直联方式下，该参数必须完全匹配，否则报错
				 如果routingkey和queueName一致也是可以
		
		
	  topic exhange
		a、所有发送topic exchange的消息被转发到所有关心routeKey中指定topic的queue上
		b、exchange将routeKey和某topic进行模糊匹配，此时队列需要绑定一个topic

		注意：可以使用通配符进行模糊匹配
			符号 "#"匹配一个或多个词
			符号 "*"匹配不多不少一个词
			例如："log.#" 能够匹配到"log.info.oa"
			      "log.*" 只会匹配到"log.erro"
			
		c、编码...

		d、编码结束后，启动消费端
			A、查看exchange
			B、查看queues
			C、实验routingKey=user.* //需要代码或者手动在管控台unbind解绑queues和routingkey
				然后再启动生产端，发送消息，查看接收到消息的条数
		

	 fanout exchange
		a、不处理路由键，只需要简单的将队列绑定到交换机上
		b、发送到交换机的消息都会被转发到与该交换机绑定的所有队列上
		c、fanout交换机转发消息是最快的
					-------
		d、编码...
		e、编码结束后，启动消费端
			A、查看
			B、查看
	
	headers不常使用：所以不做讲解

	
  
   12) 细粒度讲解
	1、binding-绑定
		a、exchange和exchange、queue之间的连接关系
		b、binding中可以包含routingKey或者参数
	2、queue-消息队列
		a、消息队列，实际存储消息数据
		b、durablity：是否持久化，durable 是，transient 否
		c、auto delete：如选yes，代表当最后一个监听(exchange)被移除之后，该queue会被自动删除
	3、message-消息
		a、服务器和因公程序传递的数据
		b、本质上就是一段数据，由properties和payload(body)组成
		c、常用属性：delivery mode、headers(自定义属性)
				//送达模式   //常规属性和自定义属性
		d、content_type、content_ecoding、priority
		e、conrrelation_id、reply_to、expiration、message_id
		f、timestamp、type、user_id、app_id、cluster_id    
	4、代码编写讲解
		...

		a 如何发送一个带有附加属性的消息
		b 
	5、virtual host-虚拟主机
		a、虚拟地址，用于进行逻辑隔离，最上层的消息路由
		b、一个virtual host里面可以有若干个exchange和queue
		c、同一个virtual host里面不能有相同名称的exchange或queue
   
   13) 本章小结
	概念，安装使用，管控台操作，特性，amqp协议等等
	






								
